def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def buildProperties = new Properties()
def buildPropertiesFile = rootProject.file('build.properties')
if (buildPropertiesFile.exists()) {
    buildProperties.load(new FileInputStream(buildPropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    // buildToolsVersion '31.0.0'
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "net.linkedmink.road_wave_fm_ui"
        minSdkVersion 20
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // setProperty 'archivesBaseName', "road_wave_fm_ui-${flutterVersionName}.${flutterVersionCode}"

        manifestPlaceholders = [
            googleMapsApiKey: buildProperties['google.mapsApiKey']
        ]
    }

    signingConfigs {
        release {
            storeFile buildProperties['keys.storeFile'] ? file(buildProperties['keys.storeFile']) : null
            storePassword buildProperties['keys.storePassword']
            keyAlias buildProperties['keys.keyAlias']
            keyPassword buildProperties['keys.keyPassword']
        }
    }

    buildTypes {
        release {

            signingConfig signingConfigs.release

            // applicationVariants.all { variant ->
            //     variant.outputs.all {
            //         def appName = "your_app_name_"
            //         def buildType = variant.variantData.variantConfiguration.buildType.name
            //         def newName
            //         if (buildType == 'debug'){
            //             newName = "app-${variant.getFlavorName()}-debug.apk"
            //         } else {
            //             newName = "${appName}${defaultConfig.versionName}_${variant.getFlavorName()}.apk"
            //         }
            //         outputFileName = newName
            //     }
            // }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.material:material:1.4.0'
}
